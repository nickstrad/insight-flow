// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quota {
  userEmail      String   @unique
  messagesLeft   Int
  videoHoursLeft Int
  resetAt        DateTime
}

enum TranscriptionStatus {
  PENDING
  TRANSCRIBE_ERROR
  EMBEDDING_ERROR
  COMPLETED
}

model Video {
  id            String  @id @default(uuid())
  youtubeId     String  @unique
  userEmail     String
  title         String
  content       String
  channelHandle String?
  playlistId    String?
  playlistTitle String?
  thumbnailUrl  String?

  chunks            TranscriptChunk[]
  durationInMinutes Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            TranscriptionStatus @default(PENDING)
}

enum NotificationType {
  TRANSCRIPTION_ERROR
  TRANSCRIPTION_SUCCESS
  EMBEDDING_ERROR
  EMBEDDING_SUCCESS
}

model Notification {
  id        String           @id @default(uuid())
  userEmail String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model TranscriptChunk {
  id                 String                 @id @default(uuid())
  timestampInSeconds Int
  text               String
  embedding          Unsupported("vector")?
  video              Video                  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId            String
  createdAt          DateTime               @default(now())
}

model Chat {
  id             String        @id @default(uuid())
  userEmail      String
  title          String
  channelHandles String[]
  playlistIds    String[]
  messages       ChatMessage[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model ChatMessage {
  id        String      @id @default(uuid())
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id])
  role      MessageRole
  message   String
  createdAt DateTime    @default(now())
}
